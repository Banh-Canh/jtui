/*
Copyright © 2024 Victor Hang
*/
package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"

	"github.com/Banh-Canh/jtui/internal/config"
	"github.com/Banh-Canh/jtui/internal/ui"
	"github.com/Banh-Canh/jtui/internal/utils"
)

var (
	versionFlag  bool
	version      string
	logLevelFlag string
)

// rootCmd represents the base command when called without any subcommands
var RootCmd = &cobra.Command{
	Use:   "jtui",
	Short: "Jellyfin TUI browser.",
	Long: `
jtui is a TUI tool that allows users to browse and navigate their Jellyfin media server.
The configuration file is autogenerated on first run at *$HOME/.config/jtui/config.yaml*`,
	PersistentPreRun: func(cmd *cobra.Command, args []string) {
		// Initialize configuration here
		initConfig()
	},
	Run: func(cmd *cobra.Command, args []string) {
		defer func() {
			if r := recover(); r != nil {
				if utils.Logger != nil {
					utils.Logger.Error("Application panicked", zap.Any("panic", r))
					utils.SyncLogger()
				}
				fmt.Printf("\n❌ Application crashed. Check the log file for details.\n")
				os.Exit(1)
			}
		}()

		if versionFlag {
			fmt.Printf("%s", version)
		} else {
			ui.Menu()
		}
	},
}

func initConfig() {
	// Your configuration initialization logic
	configDir, err := config.GetConfigDirPath()
	if err != nil {
		fmt.Printf("❌ Failed to create config directory: %v\n", err)
		os.Exit(1)
	}
	configPath := filepath.Join(configDir, "config.yaml")
	viper.SetConfigFile(configPath)
	config.CreateDefaultConfigFile(configPath)
	if err := viper.ReadInConfig(); err != nil {
		fmt.Printf("❌ Couldn't read config file: %v\n", err)
		os.Exit(1)
	}
	// Check if the logLevelFlag has been set, if not, fallback to config
	var logLevelStr string
	if logLevelFlag != "" {
		logLevelStr = logLevelFlag // Use the flag if set
	} else {
		logLevelStr = viper.GetString("loglevel") // Use config value if flag is not set
	}

	logLevel := zapcore.InfoLevel //nolint:all
	switch logLevelStr {
	case "debug":
		logLevel = zapcore.DebugLevel
	case "info":
		logLevel = zapcore.InfoLevel
	case "error":
		logLevel = zapcore.ErrorLevel
	default:
		logLevel = zapcore.InfoLevel
	}
	utils.InitializeLogger(logLevel, filepath.Join(configDir, "jtui.log"))
	utils.Logger.Info("Initialized configuration.")
}

func Execute() {
	err := RootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	RootCmd.Flags().BoolVarP(&versionFlag, "version", "v", false, "Display version information")
	RootCmd.PersistentFlags().StringVarP(&logLevelFlag, "log-level", "l", "", "Override log level (debug, info, error)")
}
